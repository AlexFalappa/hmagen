/*
 * Copyright 2014 Alessandro Falappa.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package gui.panels;

import gui.Utils;
import main.App;
import main.HmaGenSettings;

/**
 * Panel for EOAcquisition extrinsic object attributes.
 * <p>
 * @author Alessandro Falappa <alex.falappa@gmail.com>
 */
public class EOAcqPanel extends javax.swing.JPanel {

    /**
     * Creates new form EOAcqPanel
     */
    public EOAcqPanel() {
        initComponents();
    }

    @Override
    public void setEnabled(boolean flag) {
        chGenAcqPlat.setEnabled(flag);
        chRes.setEnabled(flag && chGenAcqPlat.isSelected());
        chSensMode.setEnabled(flag && chGenAcqPlat.isSelected());
        chSensName.setEnabled(flag && chGenAcqPlat.isSelected());
        chSensType.setEnabled(flag && chGenAcqPlat.isSelected());
        chSerId.setEnabled(flag && chGenAcqPlat.isSelected());
        chSwthId.setEnabled(flag && chGenAcqPlat.isSelected());
        bPlatnVals.setEnabled(flag && chGenAcqPlat.isSelected());
        bSensModeVals.setEnabled(flag && chSensMode.isSelected());
        bSensNameVals.setEnabled(flag && chSensName.isSelected());
        bSensTypVals.setEnabled(flag && chSensType.isSelected());
        bSerIdVals.setEnabled(flag && chSerId.isSelected());
        bSwthVals.setEnabled(flag && chSwthId.isSelected());
        spResFrom.setEnabled(flag && chRes.isSelected());
        spResTo.setEnabled(flag && chRes.isSelected());
        lAq1.setEnabled(flag && chGenAcqPlat.isSelected());
        lRs1.setEnabled(flag && chRes.isSelected());
        lRs2.setEnabled(flag && chRes.isSelected());
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of
     * this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        chSensType = new javax.swing.JCheckBox();
        chSensName = new javax.swing.JCheckBox();
        chSerId = new javax.swing.JCheckBox();
        spResTo = new javax.swing.JSpinner();
        lRs2 = new javax.swing.JLabel();
        spResFrom = new javax.swing.JSpinner();
        chSwthId = new javax.swing.JCheckBox();
        bPlatnVals = new javax.swing.JButton();
        chSensMode = new javax.swing.JCheckBox();
        chRes = new javax.swing.JCheckBox();
        bSensTypVals = new javax.swing.JButton();
        bSensModeVals = new javax.swing.JButton();
        bSwthVals = new javax.swing.JButton();
        bSerIdVals = new javax.swing.JButton();
        chGenAcqPlat = new javax.swing.JCheckBox();
        lRs1 = new javax.swing.JLabel();
        bSensNameVals = new javax.swing.JButton();
        lAq1 = new javax.swing.JLabel();

        chSensType.setText("Sensor type");
        chSensType.setEnabled(false);
        chSensType.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                chSensTypeItemStateChanged(evt);
            }
        });

        chSensName.setText("Sensor name");
        chSensName.setEnabled(false);
        chSensName.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                chSensNameItemStateChanged(evt);
            }
        });

        chSerId.setText("Serial identifier");
        chSerId.setEnabled(false);
        chSerId.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                chSerIdItemStateChanged(evt);
            }
        });

        spResTo.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(100), Integer.valueOf(0), null, Integer.valueOf(5)));
        spResTo.setEnabled(false);

        lRs2.setText("to");
        lRs2.setEnabled(false);

        spResFrom.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(0), Integer.valueOf(0), null, Integer.valueOf(5)));
        spResFrom.setEnabled(false);

        chSwthId.setText("Swath identifier");
        chSwthId.setEnabled(false);
        chSwthId.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                chSwthIdItemStateChanged(evt);
            }
        });

        bPlatnVals.setText("Allowed values...");
        bPlatnVals.setEnabled(false);
        bPlatnVals.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bPlatnValsActionPerformed(evt);
            }
        });

        chSensMode.setText("Sensor mode");
        chSensMode.setEnabled(false);
        chSensMode.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                chSensModeItemStateChanged(evt);
            }
        });

        chRes.setText("Resolution");
        chRes.setEnabled(false);
        chRes.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                chResItemStateChanged(evt);
            }
        });

        bSensTypVals.setText("Allowed values...");
        bSensTypVals.setEnabled(false);
        bSensTypVals.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bSensTypValsActionPerformed(evt);
            }
        });

        bSensModeVals.setText("Allowed values...");
        bSensModeVals.setEnabled(false);
        bSensModeVals.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bSensModeValsActionPerformed(evt);
            }
        });

        bSwthVals.setText("Allowed values...");
        bSwthVals.setEnabled(false);
        bSwthVals.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bSwthValsActionPerformed(evt);
            }
        });

        bSerIdVals.setText("Allowed values...");
        bSerIdVals.setEnabled(false);
        bSerIdVals.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bSerIdValsActionPerformed(evt);
            }
        });

        chGenAcqPlat.setText("Generate");
        chGenAcqPlat.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                chGenAcqPlatItemStateChanged(evt);
            }
        });

        lRs1.setText("from");
        lRs1.setEnabled(false);

        bSensNameVals.setText("Allowed values...");
        bSensNameVals.setEnabled(false);
        bSensNameVals.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bSensNameValsActionPerformed(evt);
            }
        });

        lAq1.setText("Platform name");
        lAq1.setEnabled(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(chGenAcqPlat)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(chRes)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(6, 6, 6)
                                        .addComponent(bPlatnVals))
                                    .addComponent(chSensName)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(22, 22, 22)
                                        .addComponent(bSensNameVals))
                                    .addComponent(lAq1)
                                    .addComponent(chSensMode)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(22, 22, 22)
                                        .addComponent(bSensModeVals)))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(chSensType)
                                    .addComponent(chSerId)
                                    .addComponent(chSwthId)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(22, 22, 22)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(bSensTypVals)
                                            .addComponent(bSerIdVals)
                                            .addComponent(bSwthVals)))))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(22, 22, 22)
                                .addComponent(lRs1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(spResFrom, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lRs2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(spResTo, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(chGenAcqPlat)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lAq1)
                    .addComponent(chSerId))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bPlatnVals)
                    .addComponent(bSerIdVals))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chSensName)
                    .addComponent(chSensType))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bSensNameVals)
                    .addComponent(bSensTypVals))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chSensMode)
                    .addComponent(chSwthId))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bSensModeVals)
                    .addComponent(bSwthVals))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(chRes)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lRs1)
                    .addComponent(spResFrom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lRs2)
                    .addComponent(spResTo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(8, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void chSensTypeItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_chSensTypeItemStateChanged
        bSensTypVals.setEnabled(chSensType.isSelected());
    }//GEN-LAST:event_chSensTypeItemStateChanged

    private void chSensNameItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_chSensNameItemStateChanged
        bSensNameVals.setEnabled(chSensName.isSelected());
    }//GEN-LAST:event_chSensNameItemStateChanged

    private void chSerIdItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_chSerIdItemStateChanged
        bSerIdVals.setEnabled(chSerId.isSelected());
    }//GEN-LAST:event_chSerIdItemStateChanged

    private void chSwthIdItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_chSwthIdItemStateChanged
        bSwthVals.setEnabled(chSwthId.isSelected());
    }//GEN-LAST:event_chSwthIdItemStateChanged

    private void bPlatnValsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bPlatnValsActionPerformed
        App.mf.showValsDialog(HmaGenSettings.PLATFORMS);
    }//GEN-LAST:event_bPlatnValsActionPerformed

    private void chSensModeItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_chSensModeItemStateChanged
        bSensModeVals.setEnabled(chSensMode.isSelected());
    }//GEN-LAST:event_chSensModeItemStateChanged

    private void chResItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_chResItemStateChanged
        boolean flag = chGenAcqPlat.isSelected() && chRes.isSelected();
        Utils.widgetsEnable(flag, lRs1, lRs2, spResFrom, spResTo);
    }//GEN-LAST:event_chResItemStateChanged

    private void bSensTypValsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bSensTypValsActionPerformed
        App.mf.showValsDialog(HmaGenSettings.SENS_TYPES);
    }//GEN-LAST:event_bSensTypValsActionPerformed

    private void bSensModeValsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bSensModeValsActionPerformed
        App.mf.showValsDialog(HmaGenSettings.SENS_MODES);
    }//GEN-LAST:event_bSensModeValsActionPerformed

    private void bSwthValsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bSwthValsActionPerformed
        App.mf.showValsDialog(HmaGenSettings.SWATH_IDS);
    }//GEN-LAST:event_bSwthValsActionPerformed

    private void bSerIdValsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bSerIdValsActionPerformed
        App.mf.showValsDialog(HmaGenSettings.SER_IDS);
    }//GEN-LAST:event_bSerIdValsActionPerformed

    private void chGenAcqPlatItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_chGenAcqPlatItemStateChanged
        Utils.widgetsEnable(chGenAcqPlat.isSelected(), lAq1, bPlatnVals, chSerId,
                chSensName, chSensMode, chSensType, chSwthId, chRes);
        chSerIdItemStateChanged(evt);
        chSensNameItemStateChanged(evt);
        chSensTypeItemStateChanged(evt);
        chSensModeItemStateChanged(evt);
        chSwthIdItemStateChanged(evt);
        chResItemStateChanged(evt);
    }//GEN-LAST:event_chGenAcqPlatItemStateChanged

    private void bSensNameValsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bSensNameValsActionPerformed
        App.mf.showValsDialog(HmaGenSettings.SENS_NAMES);
    }//GEN-LAST:event_bSensNameValsActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JButton bPlatnVals;
    public javax.swing.JButton bSensModeVals;
    public javax.swing.JButton bSensNameVals;
    public javax.swing.JButton bSensTypVals;
    public javax.swing.JButton bSerIdVals;
    public javax.swing.JButton bSwthVals;
    public javax.swing.JCheckBox chGenAcqPlat;
    public javax.swing.JCheckBox chRes;
    public javax.swing.JCheckBox chSensMode;
    public javax.swing.JCheckBox chSensName;
    public javax.swing.JCheckBox chSensType;
    public javax.swing.JCheckBox chSerId;
    public javax.swing.JCheckBox chSwthId;
    public javax.swing.JLabel lAq1;
    public javax.swing.JLabel lRs1;
    public javax.swing.JLabel lRs2;
    public javax.swing.JSpinner spResFrom;
    public javax.swing.JSpinner spResTo;
    // End of variables declaration//GEN-END:variables
}
