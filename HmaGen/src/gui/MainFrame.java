/*
 * Copyright 2013 sasha.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package gui;

import freemarker.template.Configuration;
import freemarker.template.DefaultObjectWrapper;
import freemarker.template.Template;
import freemarker.template.TemplateException;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.Writer;
import java.net.URISyntaxException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Random;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 * Main application window.
 *
 * @author Alessandro Falappa <alex.falappa@gmail.com>
 */
public class MainFrame extends javax.swing.JFrame {

    private ArrayList<String> parentIds = null;
    private ArrayList<String> prdTypes = new ArrayList<>();
    private ArrayList<String> statuses = new ArrayList<>();
    private ArrayList<String> polarizations = new ArrayList<>();
    private final Configuration cfg = new Configuration();
    private Template template = null;
    private final Random rng = new Random();
    private final DateFormat df = new SimpleDateFormat("yyyy-MM-dd'T'hh:mm:ss.SSS'Z'");

    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        try {
            cfg.setDirectoryForTemplateLoading(
                    new File(getClass().getResource("templates").toURI()));
            cfg.setObjectWrapper(new DefaultObjectWrapper());
            template = cfg.getTemplate("getrecords-response.ftl");
        } catch (IOException | URISyntaxException ex) {
        }
        statuses.add("NEW");
        statuses.add("PLANNED");
        statuses.add("AQUIRED");
        statuses.add("PRODUCED");
        prdTypes.add("RAW");
        prdTypes.add("L0");
        prdTypes.add("L1");
        prdTypes.add("L1B");
        prdTypes.add("ORTHO");
        polarizations.add("HH");
        polarizations.add("VV");
        polarizations.add("HV");
        polarizations.add("VH");
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        spNumRecs = new javax.swing.JSpinner();
        tabPane = new javax.swing.JTabbedPane();
        pProd = new javax.swing.JPanel();
        chSensing = new javax.swing.JCheckBox();
        spSensFrom = new javax.swing.JSpinner();
        lSt1 = new javax.swing.JLabel();
        lSt2 = new javax.swing.JLabel();
        spDuration = new javax.swing.JSpinner();
        cbDurationUnit = new javax.swing.JComboBox();
        chParentId = new javax.swing.JCheckBox();
        bParentIdVals = new javax.swing.JButton();
        chOrbitNum = new javax.swing.JCheckBox();
        lOn1 = new javax.swing.JLabel();
        spOrbitFrom = new javax.swing.JSpinner();
        lOn2 = new javax.swing.JLabel();
        spOrbitTo = new javax.swing.JSpinner();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        tfPrefix = new javax.swing.JTextField();
        lSt3 = new javax.swing.JLabel();
        spSensTo = new javax.swing.JSpinner();
        chPrdType = new javax.swing.JCheckBox();
        bPrdTypeVals = new javax.swing.JButton();
        chStatus = new javax.swing.JCheckBox();
        bStatusVals = new javax.swing.JButton();
        chLastOrbitOfs = new javax.swing.JCheckBox();
        lOf1 = new javax.swing.JLabel();
        spLstOrbitOfs = new javax.swing.JSpinner();
        chFootprint = new javax.swing.JCheckBox();
        lF1 = new javax.swing.JLabel();
        spWidth = new javax.swing.JSpinner();
        lF2 = new javax.swing.JLabel();
        spHeight = new javax.swing.JSpinner();
        chCenter = new javax.swing.JCheckBox();
        chCloudCov = new javax.swing.JCheckBox();
        lCc1 = new javax.swing.JLabel();
        spCldCovFrom = new javax.swing.JSpinner();
        lCc2 = new javax.swing.JLabel();
        spCldCovTo = new javax.swing.JSpinner();
        chSnowCov = new javax.swing.JCheckBox();
        spSnwCovFrom = new javax.swing.JSpinner();
        lSc1 = new javax.swing.JLabel();
        spSnwCovTo = new javax.swing.JSpinner();
        lSc2 = new javax.swing.JLabel();
        chPolarztn = new javax.swing.JCheckBox();
        bPlrztnVals = new javax.swing.JButton();
        pArch = new javax.swing.JPanel();
        jCheckBox2 = new javax.swing.JCheckBox();
        pAcq = new javax.swing.JPanel();
        jCheckBox1 = new javax.swing.JCheckBox();
        pBrows = new javax.swing.JPanel();
        jCheckBox3 = new javax.swing.JCheckBox();
        jSpinner1 = new javax.swing.JSpinner();
        jLabel2 = new javax.swing.JLabel();
        bGenerate = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        chClassification = new javax.swing.JCheckBox();
        cbClassification = new javax.swing.JComboBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("HmaGen");

        jLabel1.setText("Number of records:");

        spNumRecs.setModel(new javax.swing.SpinnerNumberModel(5, 1, 9999, 1));

        chSensing.setText("Sensing times");
        chSensing.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chSensingActionPerformed(evt);
            }
        });

        spSensFrom.setModel(new javax.swing.SpinnerDateModel(new java.util.Date(), null, null, java.util.Calendar.SECOND));
        spSensFrom.setEditor(new javax.swing.JSpinner.DateEditor(spSensFrom, "yyyy-MM-dd HH:mm:ss"));
        spSensFrom.setEnabled(false);

        lSt1.setText("from");
        lSt1.setEnabled(false);

        lSt2.setText("max duration");
        lSt2.setEnabled(false);

        spDuration.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(10), Integer.valueOf(0), null, Integer.valueOf(1)));
        spDuration.setEnabled(false);

        cbDurationUnit.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "milliseconds", "seconds", "minutes" }));
        cbDurationUnit.setSelectedIndex(1);
        cbDurationUnit.setEnabled(false);

        chParentId.setText("Parent identifier");
        chParentId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chParentIdActionPerformed(evt);
            }
        });

        bParentIdVals.setText("Allowed values...");
        bParentIdVals.setEnabled(false);
        bParentIdVals.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bParentIdValsActionPerformed(evt);
            }
        });

        chOrbitNum.setText("Orbit number");
        chOrbitNum.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chOrbitNumActionPerformed(evt);
            }
        });

        lOn1.setText("from");
        lOn1.setEnabled(false);

        spOrbitFrom.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(0), Integer.valueOf(0), null, Integer.valueOf(5)));
        spOrbitFrom.setEnabled(false);

        lOn2.setText("to");
        lOn2.setEnabled(false);

        spOrbitTo.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(100), Integer.valueOf(0), null, Integer.valueOf(5)));
        spOrbitTo.setEnabled(false);

        jLabel8.setText("Product identifier");

        jLabel9.setText("Prefix:");

        tfPrefix.setColumns(30);
        tfPrefix.setText("prod");

        lSt3.setText("to");
        lSt3.setEnabled(false);

        spSensTo.setModel(new javax.swing.SpinnerDateModel(new java.util.Date(), null, null, java.util.Calendar.SECOND));
        spSensTo.setEditor(new javax.swing.JSpinner.DateEditor(spSensTo, "yyyy-MM-dd HH:mm:ss"));
        spSensTo.setEnabled(false);

        chPrdType.setText("Product Type");
        chPrdType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chPrdTypeActionPerformed(evt);
            }
        });

        bPrdTypeVals.setText("Allowed values...");
        bPrdTypeVals.setEnabled(false);
        bPrdTypeVals.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bPrdTypeValsActionPerformed(evt);
            }
        });

        chStatus.setText("Status");
        chStatus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chStatusActionPerformed(evt);
            }
        });

        bStatusVals.setText("Allowed values...");
        bStatusVals.setEnabled(false);
        bStatusVals.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bStatusValsActionPerformed(evt);
            }
        });

        chLastOrbitOfs.setText("Last orbit number");
        chLastOrbitOfs.setEnabled(false);
        chLastOrbitOfs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chLastOrbitOfsActionPerformed(evt);
            }
        });

        lOf1.setText("max offset");
        lOf1.setEnabled(false);

        spLstOrbitOfs.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(3), Integer.valueOf(0), null, Integer.valueOf(5)));
        spLstOrbitOfs.setEnabled(false);

        chFootprint.setText("Footprint");
        chFootprint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chFootprintActionPerformed(evt);
            }
        });

        lF1.setText("max width");
        lF1.setEnabled(false);

        spWidth.setModel(new javax.swing.SpinnerNumberModel(4.0d, 1.0E-4d, 90.0d, 0.01d));
        spWidth.setEditor(new javax.swing.JSpinner.NumberEditor(spWidth, "##.######"));
        spWidth.setEnabled(false);

        lF2.setText("max height");
        lF2.setEnabled(false);

        spHeight.setModel(new javax.swing.SpinnerNumberModel(5.0d, 1.0E-4d, 90.0d, 0.01d));
        spHeight.setEditor(new javax.swing.JSpinner.NumberEditor(spHeight, "##.######"));
        spHeight.setEnabled(false);

        chCenter.setText("Calc. product center");
        chCenter.setEnabled(false);

        chCloudCov.setText("Cloud coverage");
        chCloudCov.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chCloudCovActionPerformed(evt);
            }
        });

        lCc1.setText("from");
        lCc1.setEnabled(false);

        spCldCovFrom.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(0), Integer.valueOf(0), null, Integer.valueOf(5)));
        spCldCovFrom.setEnabled(false);

        lCc2.setText("to");
        lCc2.setEnabled(false);

        spCldCovTo.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(100), Integer.valueOf(0), null, Integer.valueOf(5)));
        spCldCovTo.setEnabled(false);

        chSnowCov.setText("Snow coverage");
        chSnowCov.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chSnowCovActionPerformed(evt);
            }
        });

        spSnwCovFrom.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(0), Integer.valueOf(0), null, Integer.valueOf(5)));
        spSnwCovFrom.setEnabled(false);

        lSc1.setText("to");
        lSc1.setEnabled(false);

        spSnwCovTo.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(100), Integer.valueOf(0), null, Integer.valueOf(5)));
        spSnwCovTo.setEnabled(false);

        lSc2.setText("from");
        lSc2.setEnabled(false);

        chPolarztn.setText("Polarization");
        chPolarztn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chPolarztnActionPerformed(evt);
            }
        });

        bPlrztnVals.setText("Allowed values...");
        bPlrztnVals.setEnabled(false);
        bPlrztnVals.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bPlrztnValsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pProdLayout = new javax.swing.GroupLayout(pProd);
        pProd.setLayout(pProdLayout);
        pProdLayout.setHorizontalGroup(
            pProdLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pProdLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pProdLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pProdLayout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addComponent(bPlrztnVals))
                    .addComponent(chSensing)
                    .addComponent(chParentId)
                    .addComponent(jLabel8)
                    .addComponent(chOrbitNum)
                    .addComponent(chFootprint)
                    .addGroup(pProdLayout.createSequentialGroup()
                        .addGroup(pProdLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pProdLayout.createSequentialGroup()
                                .addGap(22, 22, 22)
                                .addComponent(lCc1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(spCldCovFrom, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lCc2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(spCldCovTo, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(chCloudCov))
                        .addGap(18, 18, 18)
                        .addGroup(pProdLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pProdLayout.createSequentialGroup()
                                .addGap(22, 22, 22)
                                .addComponent(lSc2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(spSnwCovFrom, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lSc1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(spSnwCovTo, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(chSnowCov)))
                    .addGroup(pProdLayout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addGroup(pProdLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pProdLayout.createSequentialGroup()
                                .addComponent(jLabel9)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(tfPrefix, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(pProdLayout.createSequentialGroup()
                                .addComponent(lSt2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(spDuration, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cbDurationUnit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(pProdLayout.createSequentialGroup()
                                .addComponent(lSt1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(spSensFrom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lSt3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(spSensTo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(pProdLayout.createSequentialGroup()
                                .addComponent(bParentIdVals)
                                .addGap(18, 18, 18)
                                .addGroup(pProdLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(chPrdType)
                                    .addGroup(pProdLayout.createSequentialGroup()
                                        .addGap(22, 22, 22)
                                        .addComponent(bPrdTypeVals)))
                                .addGap(18, 18, 18)
                                .addGroup(pProdLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(chStatus)
                                    .addGroup(pProdLayout.createSequentialGroup()
                                        .addGap(22, 22, 22)
                                        .addComponent(bStatusVals))))
                            .addGroup(pProdLayout.createSequentialGroup()
                                .addComponent(lOn1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(spOrbitFrom, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lOn2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(spOrbitTo, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addGroup(pProdLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(pProdLayout.createSequentialGroup()
                                        .addGap(22, 22, 22)
                                        .addComponent(lOf1)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(spLstOrbitOfs, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(chLastOrbitOfs)))
                            .addGroup(pProdLayout.createSequentialGroup()
                                .addComponent(lF1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(spWidth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lF2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(spHeight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(chCenter))))
                    .addComponent(chPolarztn))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pProdLayout.setVerticalGroup(
            pProdLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pProdLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pProdLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(pProdLayout.createSequentialGroup()
                        .addGroup(pProdLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel9)
                            .addComponent(tfPrefix, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(chParentId)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bParentIdVals))
                    .addGroup(pProdLayout.createSequentialGroup()
                        .addComponent(chPrdType)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bPrdTypeVals))
                    .addGroup(pProdLayout.createSequentialGroup()
                        .addComponent(chStatus)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bStatusVals)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(chSensing)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pProdLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lSt1)
                    .addComponent(spSensFrom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lSt3)
                    .addComponent(spSensTo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pProdLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lSt2)
                    .addComponent(spDuration, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbDurationUnit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pProdLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(chOrbitNum)
                    .addComponent(chLastOrbitOfs, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pProdLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lOn1)
                    .addComponent(spOrbitFrom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lOn2)
                    .addComponent(spOrbitTo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lOf1)
                    .addComponent(spLstOrbitOfs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(chFootprint)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pProdLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(pProdLayout.createSequentialGroup()
                        .addGroup(pProdLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lF1)
                            .addComponent(spWidth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lF2)
                            .addComponent(spHeight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(chCenter))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(chCloudCov)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pProdLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lCc1)
                            .addComponent(spCldCovFrom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lCc2)
                            .addComponent(spCldCovTo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(pProdLayout.createSequentialGroup()
                        .addComponent(chSnowCov)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pProdLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lSc2)
                            .addComponent(spSnwCovFrom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lSc1)
                            .addComponent(spSnwCovTo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(chPolarztn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bPlrztnVals)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        tabPane.addTab("EOProduct", pProd);

        jCheckBox2.setText("Generate");

        javax.swing.GroupLayout pArchLayout = new javax.swing.GroupLayout(pArch);
        pArch.setLayout(pArchLayout);
        pArchLayout.setHorizontalGroup(
            pArchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pArchLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jCheckBox2)
                .addContainerGap(526, Short.MAX_VALUE))
        );
        pArchLayout.setVerticalGroup(
            pArchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pArchLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jCheckBox2)
                .addContainerGap(458, Short.MAX_VALUE))
        );

        tabPane.addTab("EOArchivingInfo", pArch);

        jCheckBox1.setText("Generate");

        javax.swing.GroupLayout pAcqLayout = new javax.swing.GroupLayout(pAcq);
        pAcq.setLayout(pAcqLayout);
        pAcqLayout.setHorizontalGroup(
            pAcqLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pAcqLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jCheckBox1)
                .addContainerGap(526, Short.MAX_VALUE))
        );
        pAcqLayout.setVerticalGroup(
            pAcqLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pAcqLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jCheckBox1)
                .addContainerGap(458, Short.MAX_VALUE))
        );

        tabPane.addTab("EOAcquisitionPlat", pAcq);

        jCheckBox3.setText("Generate");

        jSpinner1.setModel(new javax.swing.SpinnerNumberModel(1, 0, 10, 1));
        jSpinner1.setEnabled(false);

        jLabel2.setText("max");

        javax.swing.GroupLayout pBrowsLayout = new javax.swing.GroupLayout(pBrows);
        pBrows.setLayout(pBrowsLayout);
        pBrowsLayout.setHorizontalGroup(
            pBrowsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pBrowsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jCheckBox3)
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(410, Short.MAX_VALUE))
        );
        pBrowsLayout.setVerticalGroup(
            pBrowsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pBrowsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pBrowsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCheckBox3)
                    .addComponent(jSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addContainerGap(454, Short.MAX_VALUE))
        );

        tabPane.addTab("EOBrowseInfo", pBrows);

        bGenerate.setText("Generate...");
        bGenerate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bGenerateActionPerformed(evt);
            }
        });

        jLabel3.setText("Extrinsic Objects:");

        chClassification.setText("Add classification");
        chClassification.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chClassificationActionPerformed(evt);
            }
        });

        cbClassification.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Optical", "Radar", "Atmospheric" }));
        cbClassification.setEnabled(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tabPane)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(spNumRecs, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(bGenerate))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(chClassification)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cbClassification, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(spNumRecs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bGenerate))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chClassification)
                    .addComponent(cbClassification, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tabPane, javax.swing.GroupLayout.DEFAULT_SIZE, 531, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void chClassificationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chClassificationActionPerformed
        cbClassification.setEnabled(chClassification.isSelected());
    }//GEN-LAST:event_chClassificationActionPerformed

    private void bGenerateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bGenerateActionPerformed
        JFileChooser jfc = new JFileChooser();
        if (jfc.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
            File selectedFile = jfc.getSelectedFile();
            if (selectedFile != null) {
                generate(selectedFile);
            }
        }
    }//GEN-LAST:event_bGenerateActionPerformed

    private void chLastOrbitOfsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chLastOrbitOfsActionPerformed
        spLstOrbitOfs.setEnabled(chLastOrbitOfs.isSelected());
        lOf1.setEnabled(chLastOrbitOfs.isSelected());
    }//GEN-LAST:event_chLastOrbitOfsActionPerformed

    private void bStatusValsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bStatusValsActionPerformed
        SetOfValsDialog pid = new SetOfValsDialog(this, statuses);
        pid.setLocationRelativeTo(this);
        pid.setVisible(true);
        statuses = pid.getValList();
    }//GEN-LAST:event_bStatusValsActionPerformed

    private void chStatusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chStatusActionPerformed
        bStatusVals.setEnabled(chStatus.isSelected());
    }//GEN-LAST:event_chStatusActionPerformed

    private void bPrdTypeValsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bPrdTypeValsActionPerformed
        SetOfValsDialog pid = new SetOfValsDialog(this, prdTypes);
        pid.setLocationRelativeTo(this);
        pid.setVisible(true);
        prdTypes = pid.getValList();
    }//GEN-LAST:event_bPrdTypeValsActionPerformed

    private void chPrdTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chPrdTypeActionPerformed
        bPrdTypeVals.setEnabled(chPrdType.isSelected());
    }//GEN-LAST:event_chPrdTypeActionPerformed

    private void chOrbitNumActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chOrbitNumActionPerformed
        spOrbitFrom.setEnabled(chOrbitNum.isSelected());
        spOrbitTo.setEnabled(chOrbitNum.isSelected());
        lOn1.setEnabled(chOrbitNum.isSelected());
        lOn2.setEnabled(chOrbitNum.isSelected());
        chLastOrbitOfs.setEnabled(chOrbitNum.isSelected());
        spLstOrbitOfs.setEnabled(chOrbitNum.isSelected() && chLastOrbitOfs.isSelected());
        lOf1.setEnabled(chOrbitNum.isSelected() && chLastOrbitOfs.isSelected());
    }//GEN-LAST:event_chOrbitNumActionPerformed

    private void bParentIdValsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bParentIdValsActionPerformed
        SetOfValsDialog pid = new SetOfValsDialog(this, parentIds);
        pid.setLocationRelativeTo(this);
        pid.setVisible(true);
        parentIds = pid.getValList();
    }//GEN-LAST:event_bParentIdValsActionPerformed

    private void chParentIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chParentIdActionPerformed
        bParentIdVals.setEnabled(chParentId.isSelected());
    }//GEN-LAST:event_chParentIdActionPerformed

    private void chSensingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chSensingActionPerformed
        spSensFrom.setEnabled(chSensing.isSelected());
        spSensTo.setEnabled(chSensing.isSelected());
        spDuration.setEnabled(chSensing.isSelected());
        cbDurationUnit.setEnabled(chSensing.isSelected());
        lSt1.setEnabled(chSensing.isSelected());
        lSt2.setEnabled(chSensing.isSelected());
        lSt3.setEnabled(chSensing.isSelected());
    }//GEN-LAST:event_chSensingActionPerformed

    private void chFootprintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chFootprintActionPerformed
        spWidth.setEnabled(chFootprint.isSelected());
        spHeight.setEnabled(chFootprint.isSelected());
        chCenter.setEnabled(chFootprint.isSelected());
        lF1.setEnabled(chFootprint.isSelected());
        lF2.setEnabled(chFootprint.isSelected());
    }//GEN-LAST:event_chFootprintActionPerformed

    private void chCloudCovActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chCloudCovActionPerformed
        spCldCovFrom.setEnabled(chCloudCov.isSelected());
        spCldCovTo.setEnabled(chCloudCov.isSelected());
        lCc1.setEnabled(chCloudCov.isSelected());
        lCc2.setEnabled(chCloudCov.isSelected());
    }//GEN-LAST:event_chCloudCovActionPerformed

    private void chSnowCovActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chSnowCovActionPerformed
        spSnwCovFrom.setEnabled(chSnowCov.isSelected());
        spSnwCovTo.setEnabled(chSnowCov.isSelected());
        lSc1.setEnabled(chSnowCov.isSelected());
        lSc2.setEnabled(chSnowCov.isSelected());
    }//GEN-LAST:event_chSnowCovActionPerformed

    private void bPlrztnValsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bPlrztnValsActionPerformed
        SetOfValsDialog pid = new SetOfValsDialog(this, polarizations);
        pid.setLocationRelativeTo(this);
        pid.setVisible(true);
        polarizations = pid.getValList();
    }//GEN-LAST:event_bPlrztnValsActionPerformed

    private void chPolarztnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chPolarztnActionPerformed
        bPlrztnVals.setEnabled(chPolarztn.isSelected());
    }//GEN-LAST:event_chPolarztnActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bGenerate;
    private javax.swing.JButton bParentIdVals;
    private javax.swing.JButton bPlrztnVals;
    private javax.swing.JButton bPrdTypeVals;
    private javax.swing.JButton bStatusVals;
    private javax.swing.JComboBox cbClassification;
    private javax.swing.JComboBox cbDurationUnit;
    private javax.swing.JCheckBox chCenter;
    private javax.swing.JCheckBox chClassification;
    private javax.swing.JCheckBox chCloudCov;
    private javax.swing.JCheckBox chFootprint;
    private javax.swing.JCheckBox chLastOrbitOfs;
    private javax.swing.JCheckBox chOrbitNum;
    private javax.swing.JCheckBox chParentId;
    private javax.swing.JCheckBox chPolarztn;
    private javax.swing.JCheckBox chPrdType;
    private javax.swing.JCheckBox chSensing;
    private javax.swing.JCheckBox chSnowCov;
    private javax.swing.JCheckBox chStatus;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JCheckBox jCheckBox2;
    private javax.swing.JCheckBox jCheckBox3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JSpinner jSpinner1;
    private javax.swing.JLabel lCc1;
    private javax.swing.JLabel lCc2;
    private javax.swing.JLabel lF1;
    private javax.swing.JLabel lF2;
    private javax.swing.JLabel lOf1;
    private javax.swing.JLabel lOn1;
    private javax.swing.JLabel lOn2;
    private javax.swing.JLabel lSc1;
    private javax.swing.JLabel lSc2;
    private javax.swing.JLabel lSt1;
    private javax.swing.JLabel lSt2;
    private javax.swing.JLabel lSt3;
    private javax.swing.JPanel pAcq;
    private javax.swing.JPanel pArch;
    private javax.swing.JPanel pBrows;
    private javax.swing.JPanel pProd;
    private javax.swing.JSpinner spCldCovFrom;
    private javax.swing.JSpinner spCldCovTo;
    private javax.swing.JSpinner spDuration;
    private javax.swing.JSpinner spHeight;
    private javax.swing.JSpinner spLstOrbitOfs;
    private javax.swing.JSpinner spNumRecs;
    private javax.swing.JSpinner spOrbitFrom;
    private javax.swing.JSpinner spOrbitTo;
    private javax.swing.JSpinner spSensFrom;
    private javax.swing.JSpinner spSensTo;
    private javax.swing.JSpinner spSnwCovFrom;
    private javax.swing.JSpinner spSnwCovTo;
    private javax.swing.JSpinner spWidth;
    private javax.swing.JTabbedPane tabPane;
    private javax.swing.JTextField tfPrefix;
    // End of variables declaration//GEN-END:variables

    private void generate(File selectedFile) {
        try {
            Map model = calcModel();
            try (Writer out = new BufferedWriter(new FileWriter(selectedFile))) {
                template.process(model, out);
            }
        } catch (IOException | TemplateException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Exception", JOptionPane.ERROR_MESSAGE);
        }
    }

    private Map calcModel() {
        Map model = new HashMap();
        model.put("numRecs", spNumRecs.getValue().toString());
        List<Map<String, String>> records = new ArrayList<>();
        model.put("records", records);
        // precalculate some values
        final Integer orbFrom = (Integer) spOrbitFrom.getValue();
        final Integer orbDelta = (Integer) spOrbitTo.getValue() - orbFrom;
        final Integer lstOrbOfs = (Integer) spLstOrbitOfs.getValue();
        final long startTime = ((Date) spSensFrom.getValue()).getTime();
        final long stopTime = ((Date) spSensTo.getValue()).getTime();
        final long timeDelta = stopTime - startTime;
        Integer durationDelta = (Integer) spDuration.getValue();
        final Integer cldCovFrom = (Integer) spCldCovFrom.getValue();
        final Integer cldCovDelta = (Integer) spCldCovTo.getValue() - cldCovFrom;
        final Integer snwCovFrom = (Integer) spCldCovFrom.getValue();
        final Integer snwCovDelta = (Integer) spCldCovTo.getValue() - snwCovFrom;
        switch (cbDurationUnit.getSelectedItem().toString()) {
            case "minutes":
                durationDelta *= 60000;
                break;
            case "seconds":
                durationDelta *= 1000;
                break;
            default:
            // do nothing for milliseconds
        }
        String classification = "";
        switch (cbClassification.getSelectedItem().toString()) {
            case "Optical":
                classification = "OPT";
                break;
            case "Radar":
                classification = "SAR";
                break;
            case "Atmospheric":
                classification = "ATM";
                break;
        }
        // generate metadata values and fill model
        for (int i = 1; i <= (Integer) spNumRecs.getValue(); i++) {
            Map rec = new HashMap();
            rec.put("prodId", String.format("%s-%d", tfPrefix.getText(), i));
            if (chParentId.isSelected() && parentIds != null) {
                rec.put("parentId", parentIds.get(rng.nextInt(parentIds.size())));
            }
            if (chPrdType.isSelected() && prdTypes != null) {
                rec.put("prdType", prdTypes.get(rng.nextInt(prdTypes.size())));
            }
            if (chStatus.isSelected() && statuses != null) {
                rec.put("status", statuses.get(rng.nextInt(statuses.size())));
            }
            if (chPolarztn.isSelected()) {
                rec.put("polarisation", polarizations.get(rng.nextInt(polarizations.size())));
            }
            if (chSensing.isSelected()) {
                long time = startTime + rng.nextInt((int) timeDelta);
                Date d = new Date(time);
                rec.put("startSensing", df.format(d));
                time += rng.nextInt(durationDelta);
                d = new Date(time);
                rec.put("stopSensing", df.format(d));
            }
            if (chOrbitNum.isSelected()) {
                Integer orb = orbFrom + rng.nextInt(orbDelta);
                rec.put("orbitNumber", orb.toString());
                if (chLastOrbitOfs.isSelected()) {
                    orb += rng.nextInt(lstOrbOfs);
                    rec.put("lastOrbit", orb.toString());
                }
            }
            if (chClassification.isSelected()) {
                rec.put("classif", classification);
            }
            if (chFootprint.isSelected()) {
                genFootprintAndCenter(rec);
            }
            if (chCloudCov.isSelected()) {
                Integer cover = cldCovFrom + rng.nextInt(cldCovDelta);
                rec.put("cloudCover", cover.toString());
            }
            if (chSnowCov.isSelected()) {
                Integer cover = snwCovFrom + rng.nextInt(snwCovDelta);
                rec.put("snowCover", cover.toString());
            }
            records.add(rec);
        }
        return model;
    }

    private void genFootprintAndCenter(Map rec) {
        double top = -90.0 + rng.nextDouble() * 180.0;
        double left = -180.0 + rng.nextDouble() * 360.0;
        double h = rng.nextDouble() * (double) spHeight.getValue();
        double w = rng.nextDouble() * (double) spWidth.getValue();
        StringBuilder sb = new StringBuilder();
        sb.append(String.valueOf(left)).append(' ').append(String.valueOf(top)).append(' ');
        sb.append(String.valueOf(left + w)).append(' ').append(String.valueOf(top)).append(' ');
        sb.append(String.valueOf(left + w)).append(' ').append(String.valueOf(top - h)).append(' ');
        sb.append(String.valueOf(left)).append(' ').append(String.valueOf(top - h)).append(' ');
        sb.append(String.valueOf(left)).append(' ').append(String.valueOf(top));
        rec.put("footprint", sb.toString());
        if (chCenter.isSelected()) {
            sb.setLength(0);
            sb.append(String.valueOf(left + w / 2)).append(' ').append(String.valueOf(top - h / 2));
            rec.put("center", sb.toString());
        }
    }
}
