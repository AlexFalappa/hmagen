/*
 * Copyright 2013 sasha.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package gui;

import com.thoughtworks.xstream.XStream;
import com.thoughtworks.xstream.io.xml.StaxDriver;
import freemarker.template.Configuration;
import freemarker.template.DefaultObjectWrapper;
import freemarker.template.Template;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.lang.reflect.Field;
import java.net.URISyntaxException;
import java.util.Map;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JSpinner;
import javax.swing.JTextField;
import main.HmaGenSettings;

/**
 * Main application window.
 *
 * @author Alessandro Falappa <alex.falappa@gmail.com>
 */
public class MainFrame extends javax.swing.JFrame {

    private final Configuration cfg = new Configuration();
    private XStream xstream = new XStream(new StaxDriver());
    Template template = null;
    HmaGenSettings settings = new HmaGenSettings();
    CalcModelWorker cmWorker = null;

    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        xstream.alias("hmagensettings", HmaGenSettings.class);
        try {
            cfg.setDirectoryForTemplateLoading(
                    new File(getClass().getResource("templates").toURI()));
            cfg.setObjectWrapper(new DefaultObjectWrapper());
            template = cfg.getTemplate("getrecords-response.ftl");
        } catch (IOException | URISyntaxException ex) {
        }
        initComponents();
    }

    private void showValsDialog(String title) {
        SetOfValsDialog pid = new SetOfValsDialog(this, title, settings.valMap.get(title));
        pid.setLocationRelativeTo(this);
        pid.setVisible(true);
        settings.valMap.put(title, pid.getValList());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        spNumRecs = new javax.swing.JSpinner();
        tabPane = new javax.swing.JTabbedPane();
        pProd = new javax.swing.JPanel();
        chSensing = new javax.swing.JCheckBox();
        spSensFrom = new javax.swing.JSpinner();
        lSt1 = new javax.swing.JLabel();
        lSt2 = new javax.swing.JLabel();
        spDuration = new javax.swing.JSpinner();
        cbDurationUnit = new javax.swing.JComboBox();
        chParentId = new javax.swing.JCheckBox();
        bParentIdVals = new javax.swing.JButton();
        chOrbitNum = new javax.swing.JCheckBox();
        lOn1 = new javax.swing.JLabel();
        spOrbitFrom = new javax.swing.JSpinner();
        lOn2 = new javax.swing.JLabel();
        spOrbitTo = new javax.swing.JSpinner();
        jLabel8 = new javax.swing.JLabel();
        tfPrefix = new javax.swing.JTextField();
        lSt3 = new javax.swing.JLabel();
        spSensTo = new javax.swing.JSpinner();
        chPrdType = new javax.swing.JCheckBox();
        bPrdTypeVals = new javax.swing.JButton();
        chStatus = new javax.swing.JCheckBox();
        bStatusVals = new javax.swing.JButton();
        chLastOrbitOfs = new javax.swing.JCheckBox();
        lOf1 = new javax.swing.JLabel();
        spLstOrbitOfs = new javax.swing.JSpinner();
        chFootprint = new javax.swing.JCheckBox();
        lF1 = new javax.swing.JLabel();
        spWidth = new javax.swing.JSpinner();
        lF2 = new javax.swing.JLabel();
        spHeight = new javax.swing.JSpinner();
        chCenter = new javax.swing.JCheckBox();
        chCloudCov = new javax.swing.JCheckBox();
        lCc1 = new javax.swing.JLabel();
        spCldCovFrom = new javax.swing.JSpinner();
        lCc2 = new javax.swing.JLabel();
        spCldCovTo = new javax.swing.JSpinner();
        chSnowCov = new javax.swing.JCheckBox();
        spSnwCovFrom = new javax.swing.JSpinner();
        lSc1 = new javax.swing.JLabel();
        spSnwCovTo = new javax.swing.JSpinner();
        lSc2 = new javax.swing.JLabel();
        chPolarztn = new javax.swing.JCheckBox();
        bPlrztnVals = new javax.swing.JButton();
        pArch = new javax.swing.JPanel();
        chGenArchInfo = new javax.swing.JCheckBox();
        chArchDate = new javax.swing.JCheckBox();
        lAd1 = new javax.swing.JLabel();
        spArdtFrom = new javax.swing.JSpinner();
        lAd2 = new javax.swing.JLabel();
        spArdtTo = new javax.swing.JSpinner();
        lAr1 = new javax.swing.JLabel();
        bArCntVals = new javax.swing.JButton();
        chArchId = new javax.swing.JCheckBox();
        bArchIdVals = new javax.swing.JButton();
        pBrows = new javax.swing.JPanel();
        chGenBrwsInfo = new javax.swing.JCheckBox();
        lBr1 = new javax.swing.JLabel();
        chQlkUrl = new javax.swing.JCheckBox();
        bThmbUrlsVals = new javax.swing.JButton();
        bQlkUrlsVals = new javax.swing.JButton();
        pAcq = new javax.swing.JPanel();
        chGenAcqPlat = new javax.swing.JCheckBox();
        lAq1 = new javax.swing.JLabel();
        chSerId = new javax.swing.JCheckBox();
        chSensName = new javax.swing.JCheckBox();
        chSensType = new javax.swing.JCheckBox();
        chSensMode = new javax.swing.JCheckBox();
        chRes = new javax.swing.JCheckBox();
        chSwthId = new javax.swing.JCheckBox();
        bPlatnVals = new javax.swing.JButton();
        bSerIdVals = new javax.swing.JButton();
        bSensNameVals = new javax.swing.JButton();
        bSensTypVals = new javax.swing.JButton();
        bSensModeVals = new javax.swing.JButton();
        bSwthVals = new javax.swing.JButton();
        lRs1 = new javax.swing.JLabel();
        spResFrom = new javax.swing.JSpinner();
        lRs2 = new javax.swing.JLabel();
        spResTo = new javax.swing.JSpinner();
        bGenerate = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        chClassification = new javax.swing.JCheckBox();
        cbClassification = new javax.swing.JComboBox();
        bSave = new javax.swing.JButton();
        bLoad = new javax.swing.JButton();
        pProgress = new javax.swing.JProgressBar();
        jSeparator1 = new javax.swing.JSeparator();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("HmaGen");
        setResizable(false);

        jLabel1.setText("records");

        spNumRecs.setModel(new javax.swing.SpinnerNumberModel(5, 1, 9999, 1));

        chSensing.setText("Sensing times");
        chSensing.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                chSensingItemStateChanged(evt);
            }
        });

        spSensFrom.setModel(new javax.swing.SpinnerDateModel(new java.util.Date(), null, null, java.util.Calendar.SECOND));
        spSensFrom.setEditor(new javax.swing.JSpinner.DateEditor(spSensFrom, "yyyy-MM-dd HH:mm:ss"));
        spSensFrom.setEnabled(false);

        lSt1.setText("from");
        lSt1.setEnabled(false);

        lSt2.setText("max duration");
        lSt2.setEnabled(false);

        spDuration.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(10), Integer.valueOf(0), null, Integer.valueOf(1)));
        spDuration.setEnabled(false);

        cbDurationUnit.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "milliseconds", "seconds", "minutes" }));
        cbDurationUnit.setSelectedIndex(1);
        cbDurationUnit.setEnabled(false);

        chParentId.setText("Parent identifier");
        chParentId.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                chParentIdItemStateChanged(evt);
            }
        });

        bParentIdVals.setText("Allowed values...");
        bParentIdVals.setEnabled(false);
        bParentIdVals.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bParentIdValsActionPerformed(evt);
            }
        });

        chOrbitNum.setText("Orbit number");
        chOrbitNum.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                chOrbitNumItemStateChanged(evt);
            }
        });

        lOn1.setText("from");
        lOn1.setEnabled(false);

        spOrbitFrom.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(0), Integer.valueOf(0), null, Integer.valueOf(5)));
        spOrbitFrom.setEnabled(false);

        lOn2.setText("to");
        lOn2.setEnabled(false);

        spOrbitTo.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(100), Integer.valueOf(0), null, Integer.valueOf(5)));
        spOrbitTo.setEnabled(false);

        jLabel8.setText("Product identifier Prefix");

        tfPrefix.setColumns(30);
        tfPrefix.setText("prod");

        lSt3.setText("to");
        lSt3.setEnabled(false);

        spSensTo.setModel(new javax.swing.SpinnerDateModel(new java.util.Date(), null, null, java.util.Calendar.SECOND));
        spSensTo.setEditor(new javax.swing.JSpinner.DateEditor(spSensTo, "yyyy-MM-dd HH:mm:ss"));
        spSensTo.setEnabled(false);

        chPrdType.setText("Product Type");
        chPrdType.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                chPrdTypeItemStateChanged(evt);
            }
        });

        bPrdTypeVals.setText("Allowed values...");
        bPrdTypeVals.setEnabled(false);
        bPrdTypeVals.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bPrdTypeValsActionPerformed(evt);
            }
        });

        chStatus.setText("Status");
        chStatus.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                chStatusItemStateChanged(evt);
            }
        });

        bStatusVals.setText("Allowed values...");
        bStatusVals.setEnabled(false);
        bStatusVals.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bStatusValsActionPerformed(evt);
            }
        });

        chLastOrbitOfs.setText("Last orbit number");
        chLastOrbitOfs.setEnabled(false);
        chLastOrbitOfs.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                chLastOrbitOfsItemStateChanged(evt);
            }
        });

        lOf1.setText("max offset");
        lOf1.setEnabled(false);

        spLstOrbitOfs.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(3), Integer.valueOf(0), null, Integer.valueOf(5)));
        spLstOrbitOfs.setEnabled(false);

        chFootprint.setText("Footprint");
        chFootprint.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                chFootprintItemStateChanged(evt);
            }
        });

        lF1.setText("max width");
        lF1.setEnabled(false);

        spWidth.setModel(new javax.swing.SpinnerNumberModel(4.0d, 1.0E-4d, 90.0d, 0.01d));
        spWidth.setEditor(new javax.swing.JSpinner.NumberEditor(spWidth, "##.######"));
        spWidth.setEnabled(false);

        lF2.setText("max height");
        lF2.setEnabled(false);

        spHeight.setModel(new javax.swing.SpinnerNumberModel(5.0d, 1.0E-4d, 90.0d, 0.01d));
        spHeight.setEditor(new javax.swing.JSpinner.NumberEditor(spHeight, "##.######"));
        spHeight.setEnabled(false);

        chCenter.setText("Calc. product center");
        chCenter.setEnabled(false);

        chCloudCov.setText("Cloud coverage");
        chCloudCov.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                chCloudCovItemStateChanged(evt);
            }
        });

        lCc1.setText("from");
        lCc1.setEnabled(false);

        spCldCovFrom.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(0), Integer.valueOf(0), null, Integer.valueOf(5)));
        spCldCovFrom.setEnabled(false);

        lCc2.setText("to");
        lCc2.setEnabled(false);

        spCldCovTo.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(100), Integer.valueOf(0), null, Integer.valueOf(5)));
        spCldCovTo.setEnabled(false);

        chSnowCov.setText("Snow coverage");
        chSnowCov.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                chSnowCovItemStateChanged(evt);
            }
        });

        spSnwCovFrom.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(0), Integer.valueOf(0), null, Integer.valueOf(5)));
        spSnwCovFrom.setEnabled(false);

        lSc1.setText("to");
        lSc1.setEnabled(false);

        spSnwCovTo.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(10), Integer.valueOf(0), null, Integer.valueOf(5)));
        spSnwCovTo.setEnabled(false);

        lSc2.setText("from");
        lSc2.setEnabled(false);

        chPolarztn.setText("Polarization");
        chPolarztn.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                chPolarztnItemStateChanged(evt);
            }
        });

        bPlrztnVals.setText("Allowed values...");
        bPlrztnVals.setEnabled(false);
        bPlrztnVals.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bPlrztnValsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pProdLayout = new javax.swing.GroupLayout(pProd);
        pProd.setLayout(pProdLayout);
        pProdLayout.setHorizontalGroup(
            pProdLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pProdLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pProdLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pProdLayout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addGroup(pProdLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(chSensing)
                            .addComponent(chParentId)
                            .addComponent(chOrbitNum)
                            .addComponent(chFootprint)
                            .addGroup(pProdLayout.createSequentialGroup()
                                .addGroup(pProdLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(pProdLayout.createSequentialGroup()
                                        .addGap(22, 22, 22)
                                        .addComponent(lCc1)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(spCldCovFrom, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(lCc2)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(spCldCovTo, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(chCloudCov))
                                .addGap(18, 18, 18)
                                .addGroup(pProdLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(pProdLayout.createSequentialGroup()
                                        .addGap(22, 22, 22)
                                        .addComponent(lSc2)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(spSnwCovFrom, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(lSc1)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(spSnwCovTo, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(chSnowCov)))
                            .addComponent(chPolarztn)
                            .addGroup(pProdLayout.createSequentialGroup()
                                .addGap(22, 22, 22)
                                .addGroup(pProdLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(bPlrztnVals)
                                    .addGroup(pProdLayout.createSequentialGroup()
                                        .addComponent(lSt2)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(spDuration, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(cbDurationUnit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(pProdLayout.createSequentialGroup()
                                        .addComponent(lSt1)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(spSensFrom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(lSt3)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(spSensTo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(pProdLayout.createSequentialGroup()
                                        .addComponent(bParentIdVals)
                                        .addGap(18, 18, 18)
                                        .addGroup(pProdLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(chPrdType)
                                            .addGroup(pProdLayout.createSequentialGroup()
                                                .addGap(22, 22, 22)
                                                .addComponent(bPrdTypeVals)))
                                        .addGap(18, 18, 18)
                                        .addGroup(pProdLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(chStatus)
                                            .addGroup(pProdLayout.createSequentialGroup()
                                                .addGap(22, 22, 22)
                                                .addComponent(bStatusVals))))
                                    .addGroup(pProdLayout.createSequentialGroup()
                                        .addComponent(lOn1)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(spOrbitFrom, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(lOn2)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(spOrbitTo, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addGroup(pProdLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(pProdLayout.createSequentialGroup()
                                                .addGap(22, 22, 22)
                                                .addComponent(lOf1)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(spLstOrbitOfs, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addComponent(chLastOrbitOfs)))
                                    .addGroup(pProdLayout.createSequentialGroup()
                                        .addComponent(lF1)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(spWidth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(lF2)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(spHeight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(chCenter))))))
                    .addGroup(pProdLayout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tfPrefix, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(14, Short.MAX_VALUE))
        );
        pProdLayout.setVerticalGroup(
            pProdLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pProdLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pProdLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(tfPrefix, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pProdLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(pProdLayout.createSequentialGroup()
                        .addComponent(chParentId)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bParentIdVals))
                    .addGroup(pProdLayout.createSequentialGroup()
                        .addComponent(chPrdType)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bPrdTypeVals))
                    .addGroup(pProdLayout.createSequentialGroup()
                        .addComponent(chStatus)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bStatusVals)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(chSensing)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pProdLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lSt1)
                    .addComponent(spSensFrom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lSt3)
                    .addComponent(spSensTo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pProdLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lSt2)
                    .addComponent(spDuration, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbDurationUnit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pProdLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(chOrbitNum)
                    .addComponent(chLastOrbitOfs, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pProdLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lOn1)
                    .addComponent(spOrbitFrom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lOn2)
                    .addComponent(spOrbitTo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lOf1)
                    .addComponent(spLstOrbitOfs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(chFootprint)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pProdLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(pProdLayout.createSequentialGroup()
                        .addGroup(pProdLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lF1)
                            .addComponent(spWidth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lF2)
                            .addComponent(spHeight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(chCenter))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(chCloudCov)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pProdLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lCc1)
                            .addComponent(spCldCovFrom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lCc2)
                            .addComponent(spCldCovTo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(pProdLayout.createSequentialGroup()
                        .addComponent(chSnowCov)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pProdLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lSc2)
                            .addComponent(spSnwCovFrom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lSc1)
                            .addComponent(spSnwCovTo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(chPolarztn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bPlrztnVals)
                .addContainerGap(39, Short.MAX_VALUE))
        );

        tabPane.addTab("EOProduct", pProd);

        chGenArchInfo.setText("Generate");
        chGenArchInfo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                chGenArchInfoItemStateChanged(evt);
            }
        });

        chArchDate.setText("Archiving date");
        chArchDate.setEnabled(false);
        chArchDate.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                chArchDateItemStateChanged(evt);
            }
        });

        lAd1.setText("from");
        lAd1.setEnabled(false);

        spArdtFrom.setModel(new javax.swing.SpinnerDateModel(new java.util.Date(), null, null, java.util.Calendar.SECOND));
        spArdtFrom.setEditor(new javax.swing.JSpinner.DateEditor(spArdtFrom, "yyyy-MM-dd HH:mm:ss"));
        spArdtFrom.setEnabled(false);

        lAd2.setText("to");
        lAd2.setEnabled(false);

        spArdtTo.setModel(new javax.swing.SpinnerDateModel(new java.util.Date(), null, null, java.util.Calendar.SECOND));
        spArdtTo.setEditor(new javax.swing.JSpinner.DateEditor(spArdtTo, "yyyy-MM-dd HH:mm:ss"));
        spArdtTo.setEnabled(false);

        lAr1.setText("Archiving Center");
        lAr1.setEnabled(false);

        bArCntVals.setText("Allowed values...");
        bArCntVals.setEnabled(false);
        bArCntVals.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bArCntValsActionPerformed(evt);
            }
        });

        chArchId.setText("Archiving identifier");
        chArchId.setEnabled(false);
        chArchId.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                chArchIdItemStateChanged(evt);
            }
        });

        bArchIdVals.setText("Allowed values...");
        bArchIdVals.setEnabled(false);
        bArchIdVals.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bArchIdValsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pArchLayout = new javax.swing.GroupLayout(pArch);
        pArch.setLayout(pArchLayout);
        pArchLayout.setHorizontalGroup(
            pArchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pArchLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pArchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pArchLayout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addGroup(pArchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(chArchDate)
                            .addComponent(lAr1)
                            .addComponent(chArchId)
                            .addGroup(pArchLayout.createSequentialGroup()
                                .addGap(22, 22, 22)
                                .addGroup(pArchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(pArchLayout.createSequentialGroup()
                                        .addComponent(lAd1)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(spArdtFrom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(lAd2)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(spArdtTo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(pArchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(bArCntVals)
                                        .addComponent(bArchIdVals))))))
                    .addComponent(chGenArchInfo))
                .addContainerGap(118, Short.MAX_VALUE))
        );
        pArchLayout.setVerticalGroup(
            pArchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pArchLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(chGenArchInfo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lAr1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bArCntVals)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(chArchId)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bArchIdVals)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(chArchDate)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pArchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lAd1)
                    .addComponent(spArdtFrom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lAd2)
                    .addComponent(spArdtTo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(245, Short.MAX_VALUE))
        );

        tabPane.addTab("EOArchivingInfo", pArch);

        chGenBrwsInfo.setText("Generate");
        chGenBrwsInfo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                chGenBrwsInfoItemStateChanged(evt);
            }
        });

        lBr1.setText("Thumbnail URL");
        lBr1.setEnabled(false);

        chQlkUrl.setText("Quicklook URL");
        chQlkUrl.setEnabled(false);
        chQlkUrl.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                chQlkUrlItemStateChanged(evt);
            }
        });

        bThmbUrlsVals.setText("Allowed values...");
        bThmbUrlsVals.setEnabled(false);
        bThmbUrlsVals.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bThmbUrlsValsActionPerformed(evt);
            }
        });

        bQlkUrlsVals.setText("Allowed values...");
        bQlkUrlsVals.setEnabled(false);
        bQlkUrlsVals.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bQlkUrlsValsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pBrowsLayout = new javax.swing.GroupLayout(pBrows);
        pBrows.setLayout(pBrowsLayout);
        pBrowsLayout.setHorizontalGroup(
            pBrowsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pBrowsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pBrowsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pBrowsLayout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addGroup(pBrowsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pBrowsLayout.createSequentialGroup()
                                .addGap(22, 22, 22)
                                .addComponent(bQlkUrlsVals))
                            .addGroup(pBrowsLayout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(bThmbUrlsVals))
                            .addComponent(lBr1)
                            .addComponent(chQlkUrl)))
                    .addComponent(chGenBrwsInfo))
                .addContainerGap(374, Short.MAX_VALUE))
        );
        pBrowsLayout.setVerticalGroup(
            pBrowsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pBrowsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(chGenBrwsInfo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lBr1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bThmbUrlsVals)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(chQlkUrl)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bQlkUrlsVals)
                .addContainerGap(301, Short.MAX_VALUE))
        );

        tabPane.addTab("EOBrowseInfo", pBrows);

        chGenAcqPlat.setText("Generate");
        chGenAcqPlat.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                chGenAcqPlatItemStateChanged(evt);
            }
        });

        lAq1.setText("Platform name");
        lAq1.setEnabled(false);

        chSerId.setText("Serial identifier");
        chSerId.setEnabled(false);
        chSerId.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                chSerIdItemStateChanged(evt);
            }
        });

        chSensName.setText("Sensor name");
        chSensName.setEnabled(false);
        chSensName.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                chSensNameItemStateChanged(evt);
            }
        });

        chSensType.setText("Sensor type");
        chSensType.setEnabled(false);
        chSensType.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                chSensTypeItemStateChanged(evt);
            }
        });

        chSensMode.setText("Sensor mode");
        chSensMode.setEnabled(false);
        chSensMode.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                chSensModeItemStateChanged(evt);
            }
        });

        chRes.setText("Resolution");
        chRes.setEnabled(false);
        chRes.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                chResItemStateChanged(evt);
            }
        });

        chSwthId.setText("Swath identifier");
        chSwthId.setEnabled(false);
        chSwthId.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                chSwthIdItemStateChanged(evt);
            }
        });

        bPlatnVals.setText("Allowed values...");
        bPlatnVals.setEnabled(false);
        bPlatnVals.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bPlatnValsActionPerformed(evt);
            }
        });

        bSerIdVals.setText("Allowed values...");
        bSerIdVals.setEnabled(false);
        bSerIdVals.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bSerIdValsActionPerformed(evt);
            }
        });

        bSensNameVals.setText("Allowed values...");
        bSensNameVals.setEnabled(false);
        bSensNameVals.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bSensNameValsActionPerformed(evt);
            }
        });

        bSensTypVals.setText("Allowed values...");
        bSensTypVals.setEnabled(false);
        bSensTypVals.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bSensTypValsActionPerformed(evt);
            }
        });

        bSensModeVals.setText("Allowed values...");
        bSensModeVals.setEnabled(false);
        bSensModeVals.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bSensModeValsActionPerformed(evt);
            }
        });

        bSwthVals.setText("Allowed values...");
        bSwthVals.setEnabled(false);
        bSwthVals.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bSwthValsActionPerformed(evt);
            }
        });

        lRs1.setText("from");
        lRs1.setEnabled(false);

        spResFrom.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(0), Integer.valueOf(0), null, Integer.valueOf(5)));
        spResFrom.setEnabled(false);

        lRs2.setText("to");
        lRs2.setEnabled(false);

        spResTo.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(100), Integer.valueOf(0), null, Integer.valueOf(5)));
        spResTo.setEnabled(false);

        javax.swing.GroupLayout pAcqLayout = new javax.swing.GroupLayout(pAcq);
        pAcq.setLayout(pAcqLayout);
        pAcqLayout.setHorizontalGroup(
            pAcqLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pAcqLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pAcqLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(chGenAcqPlat)
                    .addGroup(pAcqLayout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addGroup(pAcqLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pAcqLayout.createSequentialGroup()
                                .addGroup(pAcqLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(pAcqLayout.createSequentialGroup()
                                        .addGap(6, 6, 6)
                                        .addComponent(bPlatnVals))
                                    .addComponent(chSensName)
                                    .addGroup(pAcqLayout.createSequentialGroup()
                                        .addGap(22, 22, 22)
                                        .addComponent(bSensNameVals))
                                    .addComponent(lAq1)
                                    .addComponent(chSensMode)
                                    .addGroup(pAcqLayout.createSequentialGroup()
                                        .addGap(22, 22, 22)
                                        .addComponent(bSensModeVals))
                                    .addComponent(chRes))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 38, Short.MAX_VALUE)
                                .addGroup(pAcqLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(chSensType)
                                    .addComponent(chSerId)
                                    .addComponent(chSwthId)
                                    .addGroup(pAcqLayout.createSequentialGroup()
                                        .addGap(22, 22, 22)
                                        .addGroup(pAcqLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(bSensTypVals)
                                            .addComponent(bSerIdVals)
                                            .addComponent(bSwthVals))))
                                .addGap(183, 183, 183))
                            .addGroup(pAcqLayout.createSequentialGroup()
                                .addGap(22, 22, 22)
                                .addComponent(lRs1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(spResFrom, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lRs2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(spResTo, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))))
        );
        pAcqLayout.setVerticalGroup(
            pAcqLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pAcqLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(chGenAcqPlat)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pAcqLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lAq1)
                    .addComponent(chSerId))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pAcqLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bPlatnVals)
                    .addComponent(bSerIdVals))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pAcqLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chSensName)
                    .addComponent(chSensType))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pAcqLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bSensNameVals)
                    .addComponent(bSensTypVals))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pAcqLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chSensMode)
                    .addComponent(chSwthId))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pAcqLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bSensModeVals)
                    .addComponent(bSwthVals))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(chRes)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pAcqLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lRs1)
                    .addComponent(spResFrom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lRs2)
                    .addComponent(spResTo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(185, Short.MAX_VALUE))
        );

        tabPane.addTab("EOAcquisitionPlat", pAcq);

        bGenerate.setText("Generate...");
        bGenerate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bGenerateActionPerformed(evt);
            }
        });

        jLabel3.setText("Extrinsic Objects:");

        chClassification.setText("Add classification");
        chClassification.setName("chClassification"); // NOI18N
        chClassification.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                chClassificationItemStateChanged(evt);
            }
        });

        cbClassification.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Optical", "Radar", "Atmospheric" }));
        cbClassification.setEnabled(false);

        bSave.setText("Save..");
        bSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bSaveActionPerformed(evt);
            }
        });

        bLoad.setText("Load...");
        bLoad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bLoadActionPerformed(evt);
            }
        });

        pProgress.setEnabled(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator1)
                    .addComponent(tabPane)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(chClassification)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cbClassification, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(bGenerate)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(spNumRecs, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(pProgress, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(bLoad)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bSave)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pProgress, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1)
                        .addComponent(spNumRecs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(bGenerate)
                        .addComponent(bSave)
                        .addComponent(bLoad)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(chClassification)
                    .addComponent(cbClassification, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tabPane)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void bGenerateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bGenerateActionPerformed
        if (cmWorker != null) {
            cmWorker.cancel(false);
        } else {
            JFileChooser jfc = new JFileChooser();
            if (jfc.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
                File selectedFile = jfc.getSelectedFile();
                if (selectedFile != null) {
                    cmWorker = new CalcModelWorker(this, selectedFile);
                    bGenerate.setText("Cancel");
                    pProgress.setMaximum((int) spNumRecs.getValue());
                    cmWorker.execute();
                }
            }
        }
    }//GEN-LAST:event_bGenerateActionPerformed

    private void bStatusValsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bStatusValsActionPerformed
        showValsDialog(HmaGenSettings.STATUSES);
    }//GEN-LAST:event_bStatusValsActionPerformed

    private void bPrdTypeValsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bPrdTypeValsActionPerformed
        showValsDialog(HmaGenSettings.PRODUCT_TYPES);
    }//GEN-LAST:event_bPrdTypeValsActionPerformed

    private void bParentIdValsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bParentIdValsActionPerformed
        showValsDialog(HmaGenSettings.PARENT_IDENTIFIERS);
    }//GEN-LAST:event_bParentIdValsActionPerformed

    private void bPlrztnValsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bPlrztnValsActionPerformed
        showValsDialog(HmaGenSettings.POLARIZATIONS);
    }//GEN-LAST:event_bPlrztnValsActionPerformed

    private void bArCntValsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bArCntValsActionPerformed
        showValsDialog(HmaGenSettings.ARCHIVING_CENTERS);
    }//GEN-LAST:event_bArCntValsActionPerformed

    private void bArchIdValsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bArchIdValsActionPerformed
        showValsDialog(HmaGenSettings.ARCHIVING_IDS);
    }//GEN-LAST:event_bArchIdValsActionPerformed

    private void bThmbUrlsValsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bThmbUrlsValsActionPerformed
        showValsDialog(HmaGenSettings.THUMB_URLS);
    }//GEN-LAST:event_bThmbUrlsValsActionPerformed

    private void bQlkUrlsValsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bQlkUrlsValsActionPerformed
        showValsDialog(HmaGenSettings.QLOOK_URLS);
    }//GEN-LAST:event_bQlkUrlsValsActionPerformed

    private void bPlatnValsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bPlatnValsActionPerformed
        showValsDialog(HmaGenSettings.PLATFORMS);
    }//GEN-LAST:event_bPlatnValsActionPerformed

    private void bSerIdValsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bSerIdValsActionPerformed
        showValsDialog(HmaGenSettings.SER_IDS);
    }//GEN-LAST:event_bSerIdValsActionPerformed

    private void bSensNameValsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bSensNameValsActionPerformed
        showValsDialog(HmaGenSettings.SENS_NAMES);
    }//GEN-LAST:event_bSensNameValsActionPerformed

    private void bSensTypValsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bSensTypValsActionPerformed
        showValsDialog(HmaGenSettings.SENS_TYPES);
    }//GEN-LAST:event_bSensTypValsActionPerformed

    private void bSensModeValsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bSensModeValsActionPerformed
        showValsDialog(HmaGenSettings.SENS_MODES);
    }//GEN-LAST:event_bSensModeValsActionPerformed

    private void bSwthValsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bSwthValsActionPerformed
        showValsDialog(HmaGenSettings.SWATH_IDS);
    }//GEN-LAST:event_bSwthValsActionPerformed

    private void bSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bSaveActionPerformed
        JFileChooser jfc = new JFileChooser();
        if (jfc.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
            try {
                fillSettings();
                xstream.toXML(settings, new FileWriter(jfc.getSelectedFile()));
            } catch (IOException | SecurityException | IllegalAccessException | IllegalArgumentException ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage(), "Save error!", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_bSaveActionPerformed

    private void bLoadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bLoadActionPerformed
        JFileChooser jfc = new JFileChooser();
        if (jfc.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            settings = (HmaGenSettings) xstream.fromXML(jfc.getSelectedFile());
            applySettings();
        }
    }//GEN-LAST:event_bLoadActionPerformed

    private void chClassificationItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_chClassificationItemStateChanged
        cbClassification.setEnabled(chClassification.isSelected());
    }//GEN-LAST:event_chClassificationItemStateChanged

    private void chParentIdItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_chParentIdItemStateChanged
        bParentIdVals.setEnabled(chParentId.isSelected());
    }//GEN-LAST:event_chParentIdItemStateChanged

    private void chPrdTypeItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_chPrdTypeItemStateChanged
        bPrdTypeVals.setEnabled(chPrdType.isSelected());
    }//GEN-LAST:event_chPrdTypeItemStateChanged

    private void chPolarztnItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_chPolarztnItemStateChanged
        bPlrztnVals.setEnabled(chPolarztn.isSelected());
    }//GEN-LAST:event_chPolarztnItemStateChanged

    private void chStatusItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_chStatusItemStateChanged
        bStatusVals.setEnabled(chStatus.isSelected());
    }//GEN-LAST:event_chStatusItemStateChanged

    private void chSensingItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_chSensingItemStateChanged
        spSensFrom.setEnabled(chSensing.isSelected());
        spSensTo.setEnabled(chSensing.isSelected());
        spDuration.setEnabled(chSensing.isSelected());
        cbDurationUnit.setEnabled(chSensing.isSelected());
        lSt1.setEnabled(chSensing.isSelected());
        lSt2.setEnabled(chSensing.isSelected());
        lSt3.setEnabled(chSensing.isSelected());
    }//GEN-LAST:event_chSensingItemStateChanged

    private void chOrbitNumItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_chOrbitNumItemStateChanged
        spOrbitFrom.setEnabled(chOrbitNum.isSelected());
        spOrbitTo.setEnabled(chOrbitNum.isSelected());
        lOn1.setEnabled(chOrbitNum.isSelected());
        lOn2.setEnabled(chOrbitNum.isSelected());
        chLastOrbitOfs.setEnabled(chOrbitNum.isSelected());
        spLstOrbitOfs.setEnabled(chOrbitNum.isSelected() && chLastOrbitOfs.isSelected());
        lOf1.setEnabled(chOrbitNum.isSelected() && chLastOrbitOfs.isSelected());
    }//GEN-LAST:event_chOrbitNumItemStateChanged

    private void chFootprintItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_chFootprintItemStateChanged
        spWidth.setEnabled(chFootprint.isSelected());
        spHeight.setEnabled(chFootprint.isSelected());
        chCenter.setEnabled(chFootprint.isSelected());
        lF1.setEnabled(chFootprint.isSelected());
        lF2.setEnabled(chFootprint.isSelected());
    }//GEN-LAST:event_chFootprintItemStateChanged

    private void chCloudCovItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_chCloudCovItemStateChanged
        spCldCovFrom.setEnabled(chCloudCov.isSelected());
        spCldCovTo.setEnabled(chCloudCov.isSelected());
        lCc1.setEnabled(chCloudCov.isSelected());
        lCc2.setEnabled(chCloudCov.isSelected());
    }//GEN-LAST:event_chCloudCovItemStateChanged

    private void chSnowCovItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_chSnowCovItemStateChanged
        spSnwCovFrom.setEnabled(chSnowCov.isSelected());
        spSnwCovTo.setEnabled(chSnowCov.isSelected());
        lSc1.setEnabled(chSnowCov.isSelected());
        lSc2.setEnabled(chSnowCov.isSelected());
    }//GEN-LAST:event_chSnowCovItemStateChanged

    private void chGenArchInfoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_chGenArchInfoItemStateChanged
        lAr1.setEnabled(chGenArchInfo.isSelected());
        bArCntVals.setEnabled(chGenArchInfo.isSelected());
        chArchDate.setEnabled(chGenArchInfo.isSelected());
        chArchId.setEnabled(chGenArchInfo.isSelected());
        chArchDateItemStateChanged(evt);
        chArchIdItemStateChanged(evt);
    }//GEN-LAST:event_chGenArchInfoItemStateChanged

    private void chArchIdItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_chArchIdItemStateChanged
        bArchIdVals.setEnabled(chGenArchInfo.isSelected() && chArchId.isSelected());
    }//GEN-LAST:event_chArchIdItemStateChanged

    private void chArchDateItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_chArchDateItemStateChanged
        spArdtFrom.setEnabled(chGenArchInfo.isSelected() && chArchDate.isSelected());
        spArdtTo.setEnabled(chGenArchInfo.isSelected() && chArchDate.isSelected());
        lAd1.setEnabled(chGenArchInfo.isSelected() && chArchDate.isSelected());
        lAd2.setEnabled(chGenArchInfo.isSelected() && chArchDate.isSelected());
    }//GEN-LAST:event_chArchDateItemStateChanged

    private void chGenBrwsInfoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_chGenBrwsInfoItemStateChanged
        lBr1.setEnabled(chGenBrwsInfo.isSelected());
        bThmbUrlsVals.setEnabled(chGenBrwsInfo.isSelected());
        chQlkUrl.setEnabled(chGenBrwsInfo.isSelected());
        chQlkUrlItemStateChanged(evt);
    }//GEN-LAST:event_chGenBrwsInfoItemStateChanged

    private void chQlkUrlItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_chQlkUrlItemStateChanged
        bQlkUrlsVals.setEnabled(chGenBrwsInfo.isSelected() && chQlkUrl.isSelected());
    }//GEN-LAST:event_chQlkUrlItemStateChanged

    private void chGenAcqPlatItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_chGenAcqPlatItemStateChanged
        lAq1.setEnabled(chGenAcqPlat.isSelected());
        bPlatnVals.setEnabled(chGenAcqPlat.isSelected());
        chSerId.setEnabled(chGenAcqPlat.isSelected());
        chSensName.setEnabled(chGenAcqPlat.isSelected());
        chSensMode.setEnabled(chGenAcqPlat.isSelected());
        chSensType.setEnabled(chGenAcqPlat.isSelected());
        chSwthId.setEnabled(chGenAcqPlat.isSelected());
        chRes.setEnabled(chGenAcqPlat.isSelected());
        chSerIdItemStateChanged(evt);
        chSensNameItemStateChanged(evt);
        chSensTypeItemStateChanged(evt);
        chSensModeItemStateChanged(evt);
        chSwthIdItemStateChanged(evt);
        chResItemStateChanged(evt);
    }//GEN-LAST:event_chGenAcqPlatItemStateChanged

    private void chSerIdItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_chSerIdItemStateChanged
        bSerIdVals.setEnabled(chSerId.isSelected());
    }//GEN-LAST:event_chSerIdItemStateChanged

    private void chSensNameItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_chSensNameItemStateChanged
        bSensNameVals.setEnabled(chSensName.isSelected());
    }//GEN-LAST:event_chSensNameItemStateChanged

    private void chSensTypeItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_chSensTypeItemStateChanged
        bSensTypVals.setEnabled(chSensType.isSelected());
    }//GEN-LAST:event_chSensTypeItemStateChanged

    private void chSensModeItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_chSensModeItemStateChanged
        bSensModeVals.setEnabled(chSensMode.isSelected());
    }//GEN-LAST:event_chSensModeItemStateChanged

    private void chSwthIdItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_chSwthIdItemStateChanged
        bSwthVals.setEnabled(chSwthId.isSelected());
    }//GEN-LAST:event_chSwthIdItemStateChanged

    private void chResItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_chResItemStateChanged
        lRs1.setEnabled(chGenAcqPlat.isSelected() && chRes.isSelected());
        lRs2.setEnabled(chGenAcqPlat.isSelected() && chRes.isSelected());
        spResFrom.setEnabled(chGenAcqPlat.isSelected() && chRes.isSelected());
        spResTo.setEnabled(chGenAcqPlat.isSelected() && chRes.isSelected());
    }//GEN-LAST:event_chResItemStateChanged

    private void chLastOrbitOfsItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_chLastOrbitOfsItemStateChanged
        spLstOrbitOfs.setEnabled(chLastOrbitOfs.isSelected());
        lOf1.setEnabled(chLastOrbitOfs.isSelected());
    }//GEN-LAST:event_chLastOrbitOfsItemStateChanged
    // Variables declaration - do not modify//GEN-BEGIN:variables
    javax.swing.JButton bArCntVals;
    javax.swing.JButton bArchIdVals;
    javax.swing.JButton bGenerate;
    javax.swing.JButton bLoad;
    javax.swing.JButton bParentIdVals;
    javax.swing.JButton bPlatnVals;
    javax.swing.JButton bPlrztnVals;
    javax.swing.JButton bPrdTypeVals;
    javax.swing.JButton bQlkUrlsVals;
    javax.swing.JButton bSave;
    javax.swing.JButton bSensModeVals;
    javax.swing.JButton bSensNameVals;
    javax.swing.JButton bSensTypVals;
    javax.swing.JButton bSerIdVals;
    javax.swing.JButton bStatusVals;
    javax.swing.JButton bSwthVals;
    javax.swing.JButton bThmbUrlsVals;
    javax.swing.JComboBox cbClassification;
    javax.swing.JComboBox cbDurationUnit;
    javax.swing.JCheckBox chArchDate;
    javax.swing.JCheckBox chArchId;
    javax.swing.JCheckBox chCenter;
    javax.swing.JCheckBox chClassification;
    javax.swing.JCheckBox chCloudCov;
    javax.swing.JCheckBox chFootprint;
    javax.swing.JCheckBox chGenAcqPlat;
    javax.swing.JCheckBox chGenArchInfo;
    javax.swing.JCheckBox chGenBrwsInfo;
    javax.swing.JCheckBox chLastOrbitOfs;
    javax.swing.JCheckBox chOrbitNum;
    javax.swing.JCheckBox chParentId;
    javax.swing.JCheckBox chPolarztn;
    javax.swing.JCheckBox chPrdType;
    javax.swing.JCheckBox chQlkUrl;
    javax.swing.JCheckBox chRes;
    javax.swing.JCheckBox chSensMode;
    javax.swing.JCheckBox chSensName;
    javax.swing.JCheckBox chSensType;
    javax.swing.JCheckBox chSensing;
    javax.swing.JCheckBox chSerId;
    javax.swing.JCheckBox chSnowCov;
    javax.swing.JCheckBox chStatus;
    javax.swing.JCheckBox chSwthId;
    javax.swing.JLabel jLabel1;
    javax.swing.JLabel jLabel3;
    javax.swing.JLabel jLabel8;
    javax.swing.JSeparator jSeparator1;
    javax.swing.JLabel lAd1;
    javax.swing.JLabel lAd2;
    javax.swing.JLabel lAq1;
    javax.swing.JLabel lAr1;
    javax.swing.JLabel lBr1;
    javax.swing.JLabel lCc1;
    javax.swing.JLabel lCc2;
    javax.swing.JLabel lF1;
    javax.swing.JLabel lF2;
    javax.swing.JLabel lOf1;
    javax.swing.JLabel lOn1;
    javax.swing.JLabel lOn2;
    javax.swing.JLabel lRs1;
    javax.swing.JLabel lRs2;
    javax.swing.JLabel lSc1;
    javax.swing.JLabel lSc2;
    javax.swing.JLabel lSt1;
    javax.swing.JLabel lSt2;
    javax.swing.JLabel lSt3;
    javax.swing.JPanel pAcq;
    javax.swing.JPanel pArch;
    javax.swing.JPanel pBrows;
    javax.swing.JPanel pProd;
    javax.swing.JProgressBar pProgress;
    javax.swing.JSpinner spArdtFrom;
    javax.swing.JSpinner spArdtTo;
    javax.swing.JSpinner spCldCovFrom;
    javax.swing.JSpinner spCldCovTo;
    javax.swing.JSpinner spDuration;
    javax.swing.JSpinner spHeight;
    javax.swing.JSpinner spLstOrbitOfs;
    javax.swing.JSpinner spNumRecs;
    javax.swing.JSpinner spOrbitFrom;
    javax.swing.JSpinner spOrbitTo;
    javax.swing.JSpinner spResFrom;
    javax.swing.JSpinner spResTo;
    javax.swing.JSpinner spSensFrom;
    javax.swing.JSpinner spSensTo;
    javax.swing.JSpinner spSnwCovFrom;
    javax.swing.JSpinner spSnwCovTo;
    javax.swing.JSpinner spWidth;
    javax.swing.JTabbedPane tabPane;
    javax.swing.JTextField tfPrefix;
    // End of variables declaration//GEN-END:variables

    private void fillSettings() throws SecurityException, IllegalAccessException, IllegalArgumentException {
        Class c = this.getClass();
        for (Field f : c.getDeclaredFields()) {
            final String fName = f.getName();
            if (f.getType().equals(JCheckBox.class)) {
                JCheckBox ch = (JCheckBox) f.get(this);
                if (ch.isSelected()) {
                    settings.chkbEnabled.add(fName);
                }
            } else if (f.getType().equals(JSpinner.class)) {
                JSpinner sp = (JSpinner) f.get(this);
                settings.spinnersMap.put(fName, sp.getValue());
            } else if (f.getType().equals(JComboBox.class)) {
                JComboBox cb = (JComboBox) f.get(this);
                settings.combosMap.put(fName, cb.getSelectedItem());
            } else if (f.getType().equals(JTextField.class)) {
                JTextField tf = (JTextField) f.get(this);
                settings.textfieldsMap.put(fName, tf.getText());
            }
        }
    }

    private void applySettings() {
        Class c = this.getClass();
        for (String ch : settings.chkbEnabled) {
            try {
                ((JCheckBox) c.getDeclaredField(ch).get(this)).setSelected(true);
            } catch (NoSuchFieldException | SecurityException | IllegalArgumentException | IllegalAccessException ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage(), "Load error!", JOptionPane.ERROR_MESSAGE);
            }
        }
        for (Map.Entry<String, Object> e : settings.combosMap.entrySet()) {
            String cb = e.getKey();
            Object val = e.getValue();
            try {
                ((JComboBox) c.getDeclaredField(cb).get(this)).setSelectedItem(val);
            } catch (NoSuchFieldException | SecurityException | IllegalArgumentException | IllegalAccessException ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage(), "Load error!", JOptionPane.ERROR_MESSAGE);
            }
        }
        for (Map.Entry<String, Object> e : settings.spinnersMap.entrySet()) {
            String sp = e.getKey();
            Object val = e.getValue();
            try {
                ((JSpinner) c.getDeclaredField(sp).get(this)).setValue(val);
            } catch (NoSuchFieldException | SecurityException | IllegalArgumentException | IllegalAccessException ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage(), "Load error!", JOptionPane.ERROR_MESSAGE);
            }
        }
        for (Map.Entry<String, String> e : settings.textfieldsMap.entrySet()) {
            String tf = e.getKey();
            String val = e.getValue();
            try {
                ((JTextField) c.getDeclaredField(tf).get(this)).setText(val);
            } catch (NoSuchFieldException | SecurityException | IllegalArgumentException | IllegalAccessException ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage(), "Load error!", JOptionPane.ERROR_MESSAGE);
            }
        }
    }
}
